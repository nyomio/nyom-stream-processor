plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.31'
    id 'java'
    id 'application'
    id 'com.google.protobuf' version '0.8.8'
    id 'com.google.cloud.tools.jib' version '1.8.0'
}

ext {
    asyncHttpClientVersion = '2.10.0'
    commonsCLIVersion = "1.4"
    commonsLangVersion = '3.9'
    grpcVersion = '1.22.1'
    guiceVersion = '4.2.2'
    jacksonVersion = '2.9.9'
    javaVersion = '1.8'
    kafkaVersion = '2.2.0'
    kotlinVersion = '1.3.31'
    logbackVersion = '1.2.3'
    logstashLogbackEncoderVersion = '6.1'
    nyomageStreamProcessorApiVersion = '0.2.0'
    protostuffVersion = '1.5.9'
    rxJavaVersion = '2.2.9'
    scalaBinaryVersion = '2.11'
    slf4jVersion = '1.7.26'
    snakeyamlEngineVersion = '1.0'
}

repositories {
    maven {
        credentials {
            username "$inepexInternalMavenUser"
            password "$inepexInternalMavenPassword"
        }
        url "http://maven.inepex.com/repository/internal/"
    }
    jcenter()
    mavenCentral()
    mavenLocal()
}

dependencies {
//    protobuf "com.inepex.nyomage:nyomage-streamprocessor-api:${nyomageStreamProcessorApiVersion}"
    implementation "com.inepex.nyomage:nyomage-streamprocessor-api:${nyomageStreamProcessorApiVersion}"
    implementation "io.protostuff:protostuff-core:$protostuffVersion"
    implementation "io.protostuff:protostuff-runtime:$protostuffVersion"
    implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
    implementation "commons-cli:commons-cli:${commonsCLIVersion}"
    implementation "net.logstash.logback:logstash-logback-encoder:${logstashLogbackEncoderVersion}"
    implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    implementation "org.apache.kafka:kafka-clients:$kafkaVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.google.inject:guice:${guiceVersion}:no_aop"
    implementation "com.google.inject.extensions:guice-assistedinject:$guiceVersion"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation "ch.qos.logback:logback-core:${logbackVersion}"
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "io.grpc:grpc-netty-shaded:$grpcVersion"
    implementation "io.grpc:grpc-protobuf:$grpcVersion"
    implementation "io.grpc:grpc-stub:$grpcVersion"
    implementation "com.google.api.grpc:proto-google-common-protos:1.0.0"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit"
}

application {
    mainClassName = 'com.inepex.nyomagenyomioprotocol.AppKt'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.5.1-1"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

distributions {
    main {
        contents {
            from 'dev.crt'
            from 'dev.key'
            from 'dev.pkcs8'
        }
    }
}

jib {
    to {
        image = 'streamprocessor_nyomio-protocol'
    }
}

// automatically run jib to generate docker image
//tasks.build.depjendsOn tasks.jib
