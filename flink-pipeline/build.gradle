plugins {
    id 'application'
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.50'
    id "org.jetbrains.kotlin.kapt" version "1.3.50"
    id 'net.ltgt.apt' version '0.20'
    id 'com.google.cloud.tools.jib' version '1.8.0'
}

group 'com.inepex'
version '0.1'
mainClassName = 'com.inepex.nyomagestreamprocessor.AppKt'

ext {
    asyncHttpClientVersion = '2.10.0'
    caffeineVersion = '2.7.0'
    commonsCLIVersion = "1.4"
    commonsLangVersion = '3.9'
    commonsMathVersion = '3.6.1'
    elasticVersion = '7.1.1'
    exposedVersion = '0.13.7'
//    flinkConnectorElasticsearchVersion = '1.8.0'
    flinkConnectorKafkaVersion = '1.9.0'
    flinkVersion = '1.9.0'
    geoToolsVersion = '21.0'
    guiceVersion = '4.2.2'
    hikariCpVersion = '3.3.1'
    jacksonVersion = '2.9.9'
    javaVersion = '1.8'
    jtsVersion = '1.16.1'
    kafkaVersion = '2.2.0'
    kotlinVersion = '1.3.50'
    logbackVersion = '1.2.3'
    logstashLogbackEncoderVersion = '6.1'
    mapStructVersion = '1.3.0.Final'
    micronautVersion = '1.2.8'
    mysqlConnectorVersion = '5.1.46'
    nyomageStreamProcessorApiVersion = '0.2.0'
    protobufVersion = '3.7.1'
    protostuffVersion = '1.5.9'
    rxJavaVersion = '2.2.9'
    scalaBinaryVersion = '2.11'
    slf4jVersion = '1.7.26'
    snakeyamlEngineVersion = '1.0'
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

//applicationDefaultJvmArgs = ["-Dlog4j.configuration=log4j.properties"]

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://repository.apache.org/content/repositories/snapshots/" }
    maven { url "http://download.osgeo.org/webdav/geotools" }
    maven {
        credentials {
            username "$inepexInternalMavenUser"
            password "$inepexInternalMavenPassword"
        }
        url "http://maven.inepex.com/repository/internal/"
    }
}

configurations {
    provided
    compile.extendsFrom provided
}

dependencies {
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-security-jwt"
    implementation "io.micronaut:micronaut-security"
    implementation "javax.annotation:javax.annotation-api"

    implementation "org.locationtech.jts:jts-core:${jtsVersion}"
    implementation("org.geotools:gt-main:${geoToolsVersion}") {
        exclude group: "javax.media", module: "jai_core"
    }
    implementation("org.geotools:gt-referencing:${geoToolsVersion}") {
        exclude group: "javax.media", module: "jai_core"
    }
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation "ch.qos.logback:logback-core:${logbackVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}"
    implementation "com.github.ben-manes.caffeine:caffeine:$caffeineVersion"
    implementation "com.google.inject:guice:${guiceVersion}:no_aop"
    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
    implementation "com.inepex.nyomage:nyomage-streamprocessor-api:${nyomageStreamProcessorApiVersion}"
    implementation "commons-cli:commons-cli:${commonsCLIVersion}"
    implementation "io.protostuff:protostuff-core:$protostuffVersion"
    implementation "io.protostuff:protostuff-runtime:$protostuffVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
//    implementation "log4j:log4j:${log4jVersion}"
    implementation "net.logstash.logback:logstash-logback-encoder:${logstashLogbackEncoderVersion}"
    implementation "nyomio.nyomio-app:core-microservice-api:0.1"
    implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
    implementation "org.apache.commons:commons-math3:${commonsMathVersion}"
//    implementation "org.apache.flink:flink-connector-elasticsearch6_2.11:$flinkConnectorElasticsearchVersion" //isn't compatible with elasticsearch7
    implementation "org.apache.flink:flink-connector-kafka_2.11:${flinkConnectorKafkaVersion}"
    implementation "org.apache.kafka:kafka-clients:$kafkaVersion"
    implementation "org.asynchttpclient:async-http-client:$asyncHttpClientVersion"
    implementation "org.elasticsearch.client:elasticsearch-rest-high-level-client:$elasticVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.mapstruct:mapstruct:${mapStructVersion}"
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
//    implementation "org.slf4j:slf4j-log4j12:${slf4jVersion}"
    implementation "org.snakeyaml:snakeyaml-engine:${snakeyamlEngineVersion}"
    kapt "org.mapstruct:mapstruct-processor:${mapStructVersion}"
    kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
    kapt "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut:micronaut-validation"
    kapt "io.micronaut:micronaut-security"
    provided "org.apache.flink:flink-java:${flinkVersion}"
    provided "org.apache.flink:flink-runtime-web_2.11:${flinkVersion}"
    provided "org.apache.flink:flink-streaming-java_${scalaBinaryVersion}:${flinkVersion}"
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest "io.micronaut:micronaut-inject-java"
}

kapt {
    arguments {
        arg("mapstruct.unmappedTargetPolicy", "IGNORE")
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'nyomage-streamprocessor',
                'Implementation-Version': version,
                'Main-Class': 'com.inepex.nyomagestreamprocessor.AppKt'
    }
    baseName = project.name + '-all'
    from {
        (configurations.runtimeClasspath - configurations.provided).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
    }
}
jib {
    to {
        image = 'nyomio-nyom-stream-processor-flink-pipeline-skaffold'
    }
}
